generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum CurrencyKey {
  RUB
  KZT
  USD
  EUR
}

model Currency {
  id     String  @id @default(cuid())
  isMain Boolean @unique @default(true)

  RUB Decimal @default(1) @db.Decimal(12, 2)
  USD Decimal @default(80.5) @db.Decimal(12, 2)
  EUR Decimal @default(92) @db.Decimal(12, 2)
  KZT Decimal @default(7) @db.Decimal(12, 2)

  @@map("currency")
}

enum PaymentMethod {
  ACCUNT_BALANCE
  SBP
}

enum PaymentStatus {
  PENDING // Ожидает оплаты
  PAID // Оплачено точно в сумму заявки
  PARTIALLY_PAID // Оплачено меньше указанной суммы
  OVERPAID // Оплачено больше указанной суммы
  EXPIRED // Просрочена, но может быть оплачена позднее
  CANCELED // Отменена (вами или оператором)
  ERROR // Ошибка при создании заявки или процессе оплаты

  @@map("Status")
}

enum Operation {
  RECHARGE_ACCUNT_BALANCE

  RECHARGE_STEAM_BALANCE
  RECHARGE_PS_BALANCE
  RECHARGE_BLIZZARD_BALANCE
  RECHARGE_EPIC_BALANCE
  RECHARGE_XBOX_BALANCE

  BUY_SKINS
}


model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String? 
  email String? @unique

  steamId       String  @unique
  steamTradeUrl String? @unique
  steamAvatar   String? 

  activatedEmail  String?
  activationToken String? 

  balance Decimal @default(0) @db.Decimal(12, 2)

  selectedCurrency CurrencyKey @default(RUB)

  ref          String  @unique @default(cuid())
  referredBy   User?   @relation("Referrals", fields: [referredById], references: [id])
  referredById String?
  referrals    User[]  @relation("Referrals")

  orders Order[]

  roles Role[] @default([USER])
  cart  Cart?

  @@map("users")
}

model Cart {
  id String @id @default(cuid())

  total Decimal @default(0) @db.Decimal(12, 2)

  itemsCount Int @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  skins Skin[] @relation("CartSkins")

  @@map("cart")
}


model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionId String?        @unique
  status        PaymentStatus?
  operation     Operation
  amount        Decimal        @default(0) @db.Decimal(12, 2)
  paymentMethod PaymentMethod

  notificationEmail String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  skins Skin[] @relation("OrderSkins")

  @@map("orders")
}

model Skin {
  id   String @id @default(cuid())
  name String

  price Decimal @db.Decimal(12, 2)

  imageUrl String
  image    String
  slug     String @unique

  description Json?

  // Общие поля
  game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?

  rarity   Rarity? @relation(fields: [rarityId], references: [id])
  rarityId String?

  type   Type?   @relation(fields: [typeId], references: [id])
  typeId String?

  // Только для CS
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  model   Model?  @relation(fields: [modelId], references: [id])
  modelId String?

  previewOf Model? @relation(name: "ModelToPreviewSkin")

  souvenir   Souvenir? @relation(fields: [souvenirId], references: [id])
  souvenirId String?

  exterior   Exterior? @relation(fields: [exteriorId], references: [id])
  exteriorId String?

  killCounter   KillCounter? @relation(fields: [killCounterId], references: [id])
  killCounterId String?

  phase   Phase?  @relation(fields: [phaseId], references: [id])
  phaseId String?

  // Только для DOTA
  hero   Hero?   @relation(fields: [heroId], references: [id])
  heroId String?

  slot   Slot?   @relation(fields: [slotId], references: [id])
  slotId String?

  quality   Quality? @relation(fields: [qualityId], references: [id])
  qualityId String?

  weeklyProducts WeeklyProducts[] @relation("SkinToWeekly")
  lastBuy        LastBuy[]        @relation("SkinToLastBuy")
  carts          Cart[]           @relation("CartSkins")
  orders         Order[]          @relation("OrderSkins")

  @@index([slug])
  @@index([gameId])
  @@index([rarityId])
  @@index([typeId])
  @@index([categoryId])
  @@index([modelId])
  @@index([souvenirId])
  @@index([exteriorId])
  @@index([killCounterId])
  @@index([phaseId])
  @@index([heroId])
  @@index([slotId])
  @@index([qualityId])
  @@map("skins")
}

model Category {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Категория")

  skins Skin[]
  model Model[]

  @@index([name])
  @@map("category")
}

model Model {
  id        String @id @default(cuid())
  name      String @unique
  groupName String @default("Модель")

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  skins Skin[]

  previewSkinId String? @unique
  previewSkin   Skin?   @relation(name: "ModelToPreviewSkin", fields: [previewSkinId], references: [id])

  @@index([name])
  @@map("model")
}

model Hero {
  id        String @id @default(cuid())
  name      String @unique
  skins     Skin[]
  groupName String @default("Герой")

  @@index([name])
  @@map("hero")
}

model Slot {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Слот")

  skins Skin[]

  @@index([name])
  @@map("slot")
}

model Quality {
  id        String @id @default(cuid())
  name      String @unique
  groupName String @default("Качество")

  skins Skin[]

  @@index([name])
  @@map("quality")
}

model Exterior {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Износ")

  skins Skin[]

  @@index([name])
  @@map("exterior")
}

model Phase {
  id        String @id @default(cuid())
  name      String @unique
  groupName String @default("Фаза")

  skins Skin[]

  @@index([name])
  @@map("phase")
}

model KillCounter {
  ruName    String  @unique
  id        String  @id @default(cuid())
  name      String  @unique
  groupName String  @default("Счётчик убийств")
  flag      Boolean @default(false)

  skins Skin[]

  @@index([name])
  @@map("killCounter")
}

model Souvenir {
  id        String  @id @default(cuid())
  name      String  @unique
  ruName    String  @unique
  groupName String  @default("Сувенирность")
  flag      Boolean @default(false)

  skins Skin[]

  @@index([name])
  @@map("souvenir")
}

model Game {
  id        String   @id @default(cuid())
  name      String   @unique
  groupName String   @default("Игра")
  skins     Skin[]
  rarity    Rarity[]
  type      Type[]

  @@index([name])
  @@map("game")
}

model Type {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Тип")

  game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?

  skins Skin[]

  @@index([name])
  @@map("type")
}

model Rarity {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Раритетность")

  game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?

  skins Skin[]

  @@index([name])
  @@map("rarity")
}

model WeeklyProducts {
  id        String @id @default(cuid())
  groupName String @default("Товары недели")

  skinId String
  skin   Skin   @relation(fields: [skinId], references: [id], name: "SkinToWeekly")

  @@map("weeklyProducts")
}

model LastBuy {
  id        String @id @default(cuid())
  groupName String @default("Последние покупки")

  skinId String
  skin   Skin   @relation(fields: [skinId], references: [id], name: "SkinToLastBuy")

  @@map("lastBuy")
}
