generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String?
  email String? @unique

  steamId       String  @unique
  steamTradeUrl String? @unique

  activationToken String?
  isActivated     Boolean @default(false)

  balance Float @default(0)

  roles Role[] @default([USER])

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model SkinCS {
  id       String  @id @default(cuid())
  name     String
  price    Decimal @db.Decimal(12, 2)
  imageUrl String
  image    String
  slug     String  @unique

  description Json?

  game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?

  category   CategoryCS? @relation(fields: [categoryId], references: [id])
  categoryId String?

  quality   QualityCS? @relation(fields: [qualityId], references: [id])
  qualityId String?

  rarity   RarityCS? @relation(fields: [rarityId], references: [id])
  rarityId String?

  type   TypeCS? @relation(fields: [typeId], references: [id])
  typeId String?

  phase   PhaseCS? @relation(fields: [phaseId], references: [id])
  phaseId String?

  souvenir   SouvenirCS? @relation(fields: [souvenirId], references: [id])
  souvenirId String?

  killCounter   KillCounterCS? @relation(fields: [killCounterId], references: [id])
  killCounterId String?

  previewOf TypeCS? @relation(name: "ItemTypeToPreviewSkin")

  @@index([slug])
  @@index([categoryId])
  @@index([rarityId])
  @@index([typeId])
  @@index([qualityId])
  @@index([phaseId])
  @@index([killCounterId])
  @@index([souvenirId])
  @@index([gameId])
  @@map("skinCS")
}

model SouvenirCS {
  id        String  @id @default(cuid())
  name      String  @unique
  ruName    String  @unique
  groupName String  @default("Сувенирность")
  flag      Boolean @default(false)

  skins SkinCS[]

  @@index([name])
  @@map("souvenirCS")
}

model KillCounterCS {
  ruName    String  @unique
  id        String  @id @default(cuid())
  name      String  @unique
  groupName String  @default("Счётчик убийств")
  flag      Boolean @default(false)

  skins SkinCS[]

  @@index([name])
  @@map("killCounterCS")
}

model CategoryCS {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Категория")

  skins SkinCS[]
  type  TypeCS[]

  @@index([name])
  @@map("categoryCS")
}

model Game {
  id        String @id @default(cuid())
  name      String @unique
  groupName String @default("Игра")

  skinsCS   SkinCS[]
  skinsDOTA SkinDOTA[]
  SkinsRUST SkinRUST[]

  @@index([name])
  @@map("game")
}

model QualityCS {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Износ")

  skins SkinCS[]

  @@index([name])
  @@map("qualityCS")
}

model RarityCS {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Раритетность")

  skins SkinCS[]

  @@index([name])
  @@map("rarityCS")
}

model TypeCS {
  id        String @id @default(cuid())
  name      String @unique
  groupName String @default("Модель")

  categoryId String
  category   CategoryCS @relation(fields: [categoryId], references: [id])

  skins SkinCS[]

  previewSkinId String? @unique
  previewSkin   SkinCS? @relation(name: "ItemTypeToPreviewSkin", fields: [previewSkinId], references: [id])

  @@index([name])
  @@map("typeCS")
}

model PhaseCS {
  id        String @id @default(cuid())
  name      String @unique
  groupName String @default("Фаза")

  skins SkinCS[]

  @@index([name])
  @@map("phaseCS")
}

model SkinDOTA {
  id       String  @id @default(cuid())
  name     String
  price    Decimal @db.Decimal(12, 2)
  imageUrl String
  image    String
  slug     String  @unique

  description Json?

  game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?

  hero   HeroDOTA? @relation(fields: [heroId], references: [id])
  heroId String?

  slot   SlotDOTA? @relation(fields: [slotId], references: [id])
  slotId String?

  type   TypeDOTA? @relation(fields: [typeId], references: [id])
  typeId String?

  rarity   RarityDOTA? @relation(fields: [rarityId], references: [id])
  rarityId String?

  quality   QualityDOTA? @relation(fields: [qualityId], references: [id])
  qualityId String?

  @@index([slug])
  @@index([gameId])
  @@index([heroId])
  @@index([slotId])
  @@index([typeId])
  @@index([rarityId])
  @@index([qualityId])
  @@map("skinDOTA")
}

model HeroDOTA {
  id        String     @id @default(cuid())
  name      String     @unique
  skins     SkinDOTA[]
  groupName String     @default("Герой")

  @@index([name])
  @@map("heroDOTA")
}

model SlotDOTA {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Слот")

  skins SkinDOTA[]

  @@index([name])
  @@map("slotDOTA")
}

model TypeDOTA {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Тип")

  skins SkinDOTA[]

  @@index([name])
  @@map("typeDOTA")
}

model RarityDOTA {
  id        String @id @default(cuid())
  name      String @unique
  groupName String @default("Раритетность")

  skins SkinDOTA[]

  @@index([name])
  @@map("rarityDOTA")
}

model QualityDOTA {
  id        String @id @default(cuid())
  name      String @unique
  groupName String @default("Качество")

  skins SkinDOTA[]

  @@index([name])
  @@map("qualityDOTA")
}

model SkinRUST {
  id       String  @id @default(cuid())
  name     String
  price    Decimal @db.Decimal(12, 2)
  imageUrl String
  image    String
  slug     String  @unique

  description Json?

  game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?

  type   TypeRUST? @relation(fields: [typeId], references: [id])
  typeId String?

  @@index([slug])
  @@index([typeId])
  @@map("skinRUST")
}

model TypeRUST {
  id        String @id @default(cuid())
  name      String @unique
  ruName    String @unique
  groupName String @default("Тип")

  skins SkinRUST[]

  @@index([name])
  @@map("typeRUST")
}
